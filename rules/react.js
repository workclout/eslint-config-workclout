const OFF = 0;
const WARN = 1;
const ERROR = 2;

module.exports = {
  extends: [
    'plugin:flowtype/recommended',
    './imports.js',
    './index.js',
  ],
  parser: 'babel-eslint',
  plugins: [
    'babel',
    'react',
    'flowtype',
  ],
  env: {
    browser: true,
  },
  parserOptions: {
    optionalChaining: true,
    sourceType: 'module',
    ecmaFeatures: {
      jsx: true,
    },
  },
  rules: {
    // Disable import resolution checks in favor of flowconfig's untyped-type-import=error
    'import/no-unresolved': 0,

    'flowtype/semi': ERROR,
    'flowtype/delimiter-dangle': [ERROR, 'always-multiline'],

    'react/prop-types': ERROR,
    'react/jsx-uses-react': ERROR,
    'react/jsx-uses-vars': ERROR,
    'react/jsx-no-undef': ERROR,
    'react/self-closing-comp': ERROR,
    'react/jsx-handler-names': [ERROR, {
      eventHandlerPrefix: 'handle',
      eventHandlerPropPrefix: 'on',
    }],
    'jsx-quotes': [ERROR, 'prefer-double'],
    'class-methods-use-this': [ERROR, {
      exceptMethods: [
        'render',
        'getInitialState',
        'getDefaultProps',
        'getChildContext',
        'componentWillMount',
        'componentDidMount',
        'componentWillReceiveProps',
        'shouldComponentUpdate',
        'componentWillUpdate',
        'componentDidUpdate',
        'componentWillUnmount',
        'componentDidCatch',
      ],
    }],

    'react/display-name': [OFF, { ignoreTranspilerName: false }],
    'react/forbid-prop-types': [ERROR, {
      forbid: ['any', 'array', 'object'],
      checkContextTypes: true,
      checkChildContextTypes: true,
    }],
    'react/forbid-dom-props': [OFF, { forbid: [] }],
    'react/jsx-boolean-value': [ERROR, 'never', { always: [] }],
    'react/jsx-closing-bracket-location': [ERROR, 'line-aligned'],
    'react/jsx-closing-tag-location': ERROR,
    'react/jsx-curly-spacing': [ERROR, 'never', { allowMultiline: true }],
    'react/jsx-indent-props': [ERROR, 2],
    'react/jsx-key': OFF,
    'react/jsx-max-props-per-line': [ERROR, { maximum: 1, when: 'multiline' }],
    'react/jsx-no-bind': [ERROR, {
      ignoreRefs: true,
      allowArrowFunctions: true,
      allowBind: false,
    }],
    'react/jsx-no-duplicate-props': [ERROR, { ignoreCase: true }],
    'react/jsx-no-literals': [OFF, { noStrings: true }],
    'react/jsx-pascal-case': [ERROR, {
      allowAllCaps: true,
      ignore: [],
    }],
    'react/sort-prop-types': [OFF, {
      ignoreCase: true,
      callbacksLast: false,
      requiredFirst: false,
      sortShapeProp: true,
    }],
    'react/jsx-sort-prop-types': OFF,
    'react/jsx-sort-props': [OFF, {
      ignoreCase: true,
      callbacksLast: false,
      shorthandFirst: false,
      shorthandLast: false,
      noSortAlphabetically: false,
      reservedFirst: true,
    }],
    'react/jsx-sort-default-props': [OFF, {
      ignoreCase: true,
    }],
    'react/no-danger': WARN,
    'react/no-deprecated': [ERROR],
    'react/no-did-mount-set-state': OFF,
    'react/no-did-update-set-state': ERROR,
    'react/no-will-update-set-state': ERROR,
    'react/no-direct-mutation-state': OFF,
    'react/no-is-mounted': ERROR,
    'react/no-multi-comp': [ERROR, { ignoreStateless: true }],
    'react/no-set-state': OFF,
    'react/no-string-refs': ERROR,
    'react/no-unknown-property': ERROR,
    'react/prefer-es6-class': [ERROR, 'always'],
    'react/prefer-stateless-function': [ERROR, { ignorePureComponents: false }],
    'react/react-in-jsx-scope': ERROR,
    'react/require-render-return': ERROR,
    'react/sort-comp': [ERROR, {
      order: [
        'type-annotations',
        'static-methods',
        'instance-variables',
        'lifecycle',
        '/^on.+$/',
        'getters',
        'setters',
        '/^(get|set)(?!(InitialState$|DefaultProps$|ChildContext$)).+$/',
        'instance-methods',
        'everything-else',
        'rendering',
      ],
      groups: {
        lifecycle: [
          'displayName',
          'propTypes',
          'contextTypes',
          'childContextTypes',
          'mixins',
          'statics',
          'defaultProps',
          'constructor',
          'getDefaultProps',
          'getInitialState',
          'state',
          'getChildContext',
          'componentWillMount',
          'componentDidMount',
          'componentWillReceiveProps',
          'shouldComponentUpdate',
          'componentWillUpdate',
          'componentDidUpdate',
          'componentWillUnmount',
        ],
        rendering: [
          '/^render.+$/',
          'render',
        ],
      },
    }],
    'react/jsx-wrap-multilines': [ERROR, {
      declaration: 'parens-new-line',
      assignment: 'parens-new-line',
      return: 'parens-new-line',
      arrow: 'parens-new-line',
      condition: 'parens-new-line',
      logical: 'parens-new-line',
      prop: 'parens-new-line',
    }],
    'react/jsx-first-prop-new-line': [ERROR, 'multiline-multiprop'],
    'react/jsx-equals-spacing': [ERROR, 'never'],
    'react/jsx-indent': [ERROR, 2],
    'react/jsx-no-target-blank': [ERROR, { enforceDynamicLinks: 'always' }],
    'react/jsx-no-comment-textnodes': ERROR,
    'react/no-render-return-value': ERROR,
    'react/require-optimization': [OFF, { allowDecorators: [] }],
    'react/no-find-dom-node': ERROR,
    'react/forbid-component-props': [OFF, { forbid: [] }],
    'react/forbid-elements': [OFF, { forbid: [] }],
    'react/no-danger-with-children': ERROR,
    'react/no-unused-prop-types': ERROR,
    'react/style-prop-object': ERROR,
    'react/no-unescaped-entities': ERROR,
    'react/no-children-prop': ERROR,
    'react/jsx-tag-spacing': [ERROR, {
      closingSlash: 'never',
      beforeSelfClosing: 'always',
      afterOpening: 'never',
      beforeClosing: 'never',
    }],
    'react/jsx-space-before-closing': [OFF, 'always'],
    'react/no-array-index-key': ERROR,
    'react/require-default-props': [ERROR, {
      forbidDefaultForRequired: true,
    }],
    'react/forbid-foreign-prop-types': ERROR,
    'react/void-dom-elements-no-children': ERROR,
    'react/default-props-match-prop-types': [ERROR, { allowRequiredDefaults: false }],
    'react/no-redundant-should-component-update': ERROR,
    'react/no-unused-state': ERROR,
    'react/boolean-prop-naming': [OFF, {
      propTypeNames: ['bool', 'mutuallyExclusiveTrueProps'],
      rule: '^(is|has)[A-Z]([A-Za-z0-9]?)+',
      message: '',
    }],
    'react/no-typos': ERROR,
    'react/jsx-curly-brace-presence': [ERROR, { props: 'never', children: 'never' }],
    'react/jsx-one-expression-per-line': ERROR,
    'react/destructuring-assignment': [ERROR, 'always'],
    'react/no-access-state-in-setstate': ERROR,
    'react/button-has-type': [ERROR, {
      button: true,
      submit: true,
      reset: false,
    }],
    'react/jsx-child-element-spacing': OFF,
    'react/no-this-in-sfc': ERROR,
    'react/jsx-max-depth': OFF,
    'react/jsx-props-no-multi-spaces': ERROR,
  },
};
